@page "/location/{locationname}"
@using System.Text.Json
@using System.Globalization
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<PageTitle>@_locationData?.City</PageTitle>


@if (_hasCity)
{
  <div class="container w-75">
    <div class="row bottom-buffer">
            <section class="box features">
              <h2 class="major"><span>@_locationData?.City</span></h2>
            </section>
    </div>
    <div class="row bottom-buffer">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Centered="true" KeepPanelsAlive="true">
      <MudTabPanel Text="City Overview">
        <div class="row bottom-buffer">
          <div class="col-6">
            <div class="row bottom-buffer">
              <div class="col-12">
                <div class="row bottom-buffer">
                  <img class="img-fluid rounded mx-auto d-block" src="images/locations/@_locationData.City.ToLowerInvariant()/overview.jpg">
                </div>
                <div class="row">
                  <div class="col-12">
                    <h4>Description</h4>
                    <p>@_locationData.LocationInformation?.Description</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-6">
            <div class="row">
              <div class="col-12">
                <h4>Key Geopolitical Facts</h4>
                <p>
                  <b>Population</b> - @_locationData.LocationInformation?.Population.ToString("#,#", CultureInfo.InvariantCulture)<br>
                  <b>Altitude</b> - @_locationData.LocationInformation?.Altitude.ToString("#,#", CultureInfo.InvariantCulture) meters<br> 
                  <b>Industries</b> - @string.Join(", ", @_locationData.LocationInformation?.Industries)
                </p>
              </div>
            </div>
            <div class="row">
              <div class="col-12">
                <h4>Weather</h4>
                <p>
                  @_locationData.LocationInformation?.Weather<br>
                </p>
              </div>
            </div>
            <div class="row">
              <div class="col-12">
                <h4>History</h4>
                <span>@_locationData.LocationInformation?.History</span>
              </div>
            </div>
          </div>
        </div>
          <div class="row bottom-buffer">

          </div>
      </MudTabPanel>
      <MudTabPanel Text="Climate Impact">
        @if(LocationName is not null){
        <div class="row bottom-buffer">
              <div class="col-12 align-self-center">
                <div class="d-flex justify-content-center" id="vizContainer" @ref="vizContainer"></div>
              </div>
        </div>
      }
      </MudTabPanel>
      <MudTabPanel Text="Risks & Mitigation">
          <div class="row">
            <div class="col-6">
                <h4>Top Risk</h4>
                <p><b>@_locationData?.RisksAndMitigations.TopRisk.Name</b>
                <br>@_locationData?.RisksAndMitigations.TopRisk.Description</p>
            </div>
          </div>
          <div class="row">
            <div class="col-6">
              <h4>Severe Events Timeline</h4>
              <ul class="list-group">
                @foreach (var item in @_locationData?.RisksAndMitigations?.Risks)
                {
                    if(@item.Url is not null){
                        <li class="list-group-item"><a href="@item.Url"><b>@item.Name - @item.GetDate()</b></a>@if(item.Description is not null){<span> - @item.Description</span>}</li>
                    }else{
                        <li class="list-group-item"><b>@item.Name - @item.GetDate()</b> @if(item.Description is not null){<span> - @item.Description</span>}</li>
                    }
                }
              </ul> 
            </div>
            <div class="col-6">
                <h4>Risk Mitigation Strategies</h4>
                <ul class="list-group">
                  @foreach (var item in @_locationData?.RisksAndMitigations?.Mitigations)
                  {
                    if(@item.Url is not null){
                      <li class="list-group-item"><a href="@item.Url"><b>@item.Name</b></a>@if(item.Description is not null){<span> - @item.Description</span>}</li>
                    }else{
                        <li class="list-group-item"><b>@item.Name</b> @if(item.Description is not null){<span> - @item.Description</span>}</li>
                    }
                  }
                </ul>
            </div>
          </div>
            
      </MudTabPanel>
    </MudTabs>
  </div>
    </div>
}
else
{
    <div class="alert alert-danger">There's no page like that here!</div>
}



@code {
    [Parameter]
    public string? LocationName { get; set; }
    ElementReference vizContainer;

    private bool _hasCity;

    private LocationData? _locationData;

    protected override void OnInitialized()
    {
        _hasCity = LocationName != null && LocationDictionary.ContainsKey(LocationName.ToLowerInvariant());
        if(_hasCity){
          string jsonString = File.ReadAllText($"Models/{LocationName?.ToLowerInvariant()}.json");
          _locationData = JsonSerializer.Deserialize<LocationData>(jsonString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string url = _locationData?.TableauUrl;
      
        Console.WriteLine("Invoking initViz");
        
        // invoke the 'initViz' function - pass the vizContainer element and the URL
        // note I adjusted the sample URL to https 
        await jsRuntime.InvokeVoidAsync("initViz", vizContainer, url);

        Console.WriteLine("Invoked initViz");

        await base.OnAfterRenderAsync(firstRender);
    }

    public IDictionary<string, string> LocationDictionary = new Dictionary<string, string>
    {
        { "jakarta", "Jakarta" },
        { "lagos", "Lagos" },
        { "oxford", "Oxford" },
        { "mumbai", "Mumbai" },
        { "sanfrancisco", "San Francisco" },
        { "newyork", "New York" }
    };
}